// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieRental.DAL.Models;

#nullable disable

namespace MovieRental.DAL.Migrations
{
    [DbContext(typeof(MovieRentalContext))]
    partial class MovieRentalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.Property<int>("CategoriesId_Category")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId_Movie")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId_Category", "MoviesId_Movie");

                    b.HasIndex("MoviesId_Movie");

                    b.ToTable("MovieCategory", (string)null);
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Category", b =>
                {
                    b.Property<int>("Id_Category")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Category"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id_Category");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Movie", b =>
                {
                    b.Property<int>("Id_Movie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Movie"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Premiere")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Movie");

                    b.HasIndex("RentId");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Payment", b =>
                {
                    b.Property<int>("Id_Payment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Payment"));

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.HasKey("Id_Payment");

                    b.HasIndex("RentId")
                        .IsUnique();

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Rate", b =>
                {
                    b.Property<int>("Id_Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Rate"));

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<double>("RateValue")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id_Rate");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Rent", b =>
                {
                    b.Property<int>("Id_Rent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Rent"));

                    b.Property<DateTime>("RentingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id_Rent");

                    b.HasIndex("UserId");

                    b.ToTable("Rentals", (string)null);
                });

            modelBuilder.Entity("MovieRental.DAL.Models.User", b =>
                {
                    b.Property<int>("Id_User")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_User"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id_User");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.HasOne("MovieRental.DAL.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId_Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieRental.DAL.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId_Movie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Movie", b =>
                {
                    b.HasOne("MovieRental.DAL.Models.Rent", "Rent")
                        .WithMany("Movies")
                        .HasForeignKey("RentId");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Payment", b =>
                {
                    b.HasOne("MovieRental.DAL.Models.Rent", "Rent")
                        .WithOne("Payment")
                        .HasForeignKey("MovieRental.DAL.Models.Payment", "RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Rate", b =>
                {
                    b.HasOne("MovieRental.DAL.Models.Movie", "Movie")
                        .WithMany("Rates")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MovieRental.DAL.Models.User", "User")
                        .WithMany("Rates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Rent", b =>
                {
                    b.HasOne("MovieRental.DAL.Models.User", "User")
                        .WithMany("Rents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Movie", b =>
                {
                    b.Navigation("Rates");
                });

            modelBuilder.Entity("MovieRental.DAL.Models.Rent", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieRental.DAL.Models.User", b =>
                {
                    b.Navigation("Rates");

                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
